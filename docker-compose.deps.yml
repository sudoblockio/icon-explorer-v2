version: "3.7"

services:
  ############
  # Database #
  ############
  postgres:
    image: postgres
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c 'config_file=/etc/postgresql/postgresql.conf'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
#    ports:
#      - "5432:${POSTGRES_EXTERNAL_PORT:-5432}"
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - ./volumes/postgres/config:/docker-entrypoint-initdb.d/
      - ./postgresql.conf:/etc/postgresql/postgresql.conf

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"

  #########
  # Kafka #
  #########
  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_TAG:-latest}
    hostname: zookeeper
    volumes:
      - ./volumes/zoo/data:/var/lib/zookeeper/data
      - ./volumes/zoo/log:/var/lib/zookeeper/log
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-enterprise-kafka:${CP_ENTERPRISE_KAFKA_TAG:-latest}
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    volumes:
      - ./volumes/broker/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_RACK: "r1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_JMX_PORT: 9991
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_MESSAGE_MAX_BYTES: 67109632

  schemaregistry:
    image: confluentinc/cp-schema-registry:${CP_SCHEMA_REGISTRY_TAG:-latest}
    hostname: schemaregistry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  rest-proxy:
    image: confluentinc/cp-kafka-rest:${CP_KAFKA_REST_TAG:-latest}
    hostname: rest-proxy
    depends_on:
      - kafka
      - schemaregistry
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:9092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8084'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      KAFKA_REST_HOST_NAME: 'rest-proxy'

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.1
    restart: always
    hostname: control-center
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'schemaregistry:8081'
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - default

  #########
  # Redis #
  #########
  redis:
    image: redis:latest
    ports:
      - "6379:6379"


  #############
  # Exporters #
  #############
  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    restart: always
    depends_on:
      - postgres
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/postgres?sslmode=disable
    ports:
      - "9187:9187"

  kafka-exporter:
    image: danielqsj/kafka-exporter
    restart: always
    depends_on:
      - kafka
    command:
      - --kafka.server=kafka:9092
    ports:
      - "9308:9308"

  node-exporter:
    image: bitnami/node-exporter:latest
    ports:
      - 9100:9100
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"

  cadvisor:
    image: google/cadvisor:latest
    restart: always
    privileged: true
    stdin_open: true
    container_name: cadvisor
    ports:
      - 8081:8080/tcp
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: "--enable_load_reader=true"
