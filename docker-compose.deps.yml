version: "3.7"

services:
  ############
  # Database #
  ############
  postgres:
    image: postgres
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c 'config_file=/etc/postgresql/postgresql.conf'

    # This val is still being tuned
    shm_size: '4gb'
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      # Used in init scripts
      ICON_ADMIN_PASSWORD: "${ICON_ADMIN_PASSWORD}"
      ICON_WORKER_PASSWORD: "${ICON_WORKER_PASSWORD}"
      ICON_API_PASSWORD: "${ICON_API_PASSWORD}"

    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - ./volumes/postgres/data:/var/lib/postgresql/data
      - ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
      - ./postgresql.conf:/etc/postgresql/postgresql.conf

  #########
  # Kafka #
  #########
  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_ZOOKEEPER_TAG:-latest}
    hostname: zookeeper
    volumes:
      - ./volumes/zoo/data:/var/lib/zookeeper/data
      - ./volumes/zoo/log:/var/lib/zookeeper/log
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-enterprise-kafka:${CP_ENTERPRISE_KAFKA_TAG:-latest}
    hostname: kafka
    depends_on:
      - zookeeper
    volumes:
      - ./volumes/broker/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_RACK: "r1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: "schemaregistry:8081"
      KAFKA_JMX_PORT: 9991
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_MESSAGE_MAX_BYTES: 67109632

  #########
  # Redis #
  #########
  redis:
    image: redis:latest

  #############
  # Exporters #
  #############
  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    restart: always
    depends_on:
      - postgres
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:${POSTGRES_PASSWORD:-changeme}@postgres:5432/postgres?sslmode=disable
    ports:
      - "${POSTGRES_EXPORTER_EXTERNAL_PORT:-9187}:9187"

  kafka-exporter:
    image: danielqsj/kafka-exporter
    restart: always
    depends_on:
      - kafka
    command:
      - --kafka.server=kafka:9092
    ports:
      - "${KAFKA_EXPORTER_EXTERNAL_PORT:-9308}:9308"

  node-exporter:
    image: bitnami/node-exporter:latest
    ports:
      - "${NODE_EXPORTER_EXTERNAL_PORT:-9100}:9100"
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  cadvisor:
    image: google/cadvisor:latest
    restart: always
    privileged: true
    stdin_open: true
    container_name: cadvisor
    ports:
      - "${NODE_EXPORTER_EXTERNAL_PORT:-8081}:8080/tcp"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--housekeeping_interval=30s"
      - "--docker_only=true"
      - "--disable_metrics=percpu,sched,tcp,udp,disk,diskIO,accelerator,hugetlb,referenced_memory,cpu_topology,resctrl"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
